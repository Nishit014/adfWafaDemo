{
	"name": "empDepUsingFlowlet",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "emp",
						"type": "DatasetReference"
					},
					"name": "emp"
				},
				{
					"dataset": {
						"referenceName": "dep",
						"type": "DatasetReference"
					},
					"name": "dep"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outData",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "empDep1",
						"type": "DataFlowReference"
					}
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> emp",
				"source(output(",
				"          depid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dep",
				"emp, dep compose(mapColumn(",
				"          empid,",
				"          { name} = name,",
				"          { country} = country,",
				"          { department} = department",
				"     ),mapColumn(",
				"          depid = empid,",
				"          depname = department",
				"     ),",
				"     composition: 'empDep1') ~> flowlet1@(outputData)",
				"flowlet1@outputData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['flowletOutput'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}