{
	"name": "aggJoinSplit",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "emp",
						"type": "DatasetReference"
					},
					"name": "emp"
				},
				{
					"dataset": {
						"referenceName": "dep",
						"type": "DatasetReference"
					},
					"name": "dep"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outData",
						"type": "DatasetReference"
					},
					"name": "ItSink"
				},
				{
					"dataset": {
						"referenceName": "outData",
						"type": "DatasetReference"
					},
					"name": "HrSink"
				},
				{
					"dataset": {
						"referenceName": "outData",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "aggregateGroupByDepartment"
				},
				{
					"name": "join1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          { name} as string,",
				"          { country} as string,",
				"          { department} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> emp",
				"source(output(",
				"          depid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dep",
				"emp aggregate(groupBy({ department}),",
				"     empid = count(empid)) ~> aggregateGroupByDepartment",
				"aggregateGroupByDepartment, dep join({ department} == depid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 split(equals(depid,'1'),",
				"     equals(depid,'2'),",
				"     disjoint: false) ~> split1@(IT, HR, rest)",
				"split1@IT sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['aggJoinSplit_IT'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          depname,",
				"          empCount = empid",
				"     ),",
				"     partitionBy('hash', 1)) ~> ItSink",
				"split1@HR sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['aggJoinSplit_HR'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          depname,",
				"          empCount = empid",
				"     ),",
				"     partitionBy('hash', 1)) ~> HrSink",
				"split1@rest sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['aggJoinSplit_rest'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          depname,",
				"          empCount = empid",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}