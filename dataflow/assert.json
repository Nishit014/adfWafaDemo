{
	"name": "assert",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "dep",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outData",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "assert1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empld as string,",
				"          name as string,",
				"          gender as string,",
				"          doj as string,",
				"          depid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          depid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1, source2 assert(expectTrue(!isNull(toDate(doj,'yyyymmdd')), false, 'assertDoj', null, 'checking doj format'),",
				"     expectUnique(empld, false, 'assertid', null, 'unique empid'),",
				"     expectExists(source1@depid == source2@depid, false, 'assertDepExists')) ~> assert1",
				"assert1 derive(isErrorRow = isError(),",
				"          isIncorrectDepRow = hasError('assertDepExists')) ~> derivedColumn1",
				"derivedColumn1 filter(isErrorRow == false()) ~> filter1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['assertedData'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}